#!/bin/csh
# Script which compiles and calls the Fortran executable and 
# runs the simulation.
# This script is called by the batch script "btch_vvcm_cam".
#-------------------------------------------------------------------  

# The compilation to the gnumakefile system and will only
#  compile if code has been updated. If you are changing
#  compilation options 'make clobber' first.
# The format is make, compiler_option=true (if platform has more than
#  one compiler available) DEBUG=logical_value (default is false and
#  can be omitted if default is desired).
# Example: make INTEL=true DEBUG=true

source $MODULESHOME/init/csh
module purge
module load intel14/comp intel14/hdf5-1.8.12 intel14/openmpi-1.8 intel14/netcdf-4.3.2 intel14/petsc-3.6.2 intel14/pnetcdf-1.3.1


set echo  # echoes the commands
set expname = `pwd | awk  'BEGIN {FS="/"} {print $NF}'` 
set subdir = ../../DATA/${expname}
set datadir = ../../RUNDATA
set codedir = CODE

make INTEL_COMP=true CASENAME=${expname} CODEDIR=${codedir} -f ../makefile 

setenv EXPHDR_tmp ${expname}" "${subdir}

#for restart ----------------------------------------
# setenv EXPHDR_INI1 ${subdir}"/GPTB02"
# setenv EXPHDR_INI2 ${subdir}"/GPTE01"
# For restart ----------------------------------------
#-------------------------------------------------------------------
cd ${subdir}

set file = ${subdir}/PARMSLD.f

set nx = `grep "nsbdm_x = " ${file} |sed 's/, .*$//g' |sed 's/^.*nsbdm_x = //g'`
set ny = `grep "nsbdm_y = " ${file} |sed 's/, .*$//g' |sed 's/^.*nsbdm_y = //g'`
@ ntask = $nx * $ny
@ pth = 12
@ ppn = $ntask % $pth

while ( $ppn != 0 || $pth  == 0)
@ pth --
@ ppn = $ntask % $pth
end
@ ppn = $ntask / $pth

if ( $pth < 8 || $ppn >= 36) then
echo 'bad cores.'
exit
endif

sed -e 's/expname/'${expname}'/g' \
    -e 's/np_nodes/'$ppn'/g' \
    -e 's/np_threads/'$pth'/g' \
    -e 's/total_cores/'$ntask'/g' ../../RUN/run.sh > run.sh

#bsub < run.sh
qsub run.sh

exit

